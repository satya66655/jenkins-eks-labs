pipeline {
  agent any
  options { timestamps() }

  parameters {
    string(name: 'REPO_URL', defaultValue: 'https://github.com/satya66655/jenkins-eks-labs.git', description: 'Repo with k8s manifests')
    string(name: 'BRANCH',   defaultValue: 'main', description: 'Branch')
    string(name: 'K8S_PATH', defaultValue: 'k8s',  description: 'Path of manifests')
    string(name: 'CLUSTER_NAME', defaultValue: 'learnings', description: 'EKS cluster name')
    string(name: 'AWS_REGION',   defaultValue: 'us-east-1', description: 'AWS region')
    choice(name: 'AUTH_METHOD', choices: ['ROLE','AWS_CREDS','KUBECONFIG'], description: 'Auth mode')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH}"]],
          userRemoteConfigs: [[url: params.REPO_URL, credentialsId: 'github-pat']]
        ])
      }
    }

    stage('Apply Manifests') {
      steps {
        script {
          if (params.AUTH_METHOD == 'ROLE') {
            sh '''
              set -euo pipefail
              aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}"
              kubectl apply -f "${K8S_PATH}/"
            '''
          } else if (params.AUTH_METHOD == 'AWS_CREDS') {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-eks']]) {
              sh '''
                set -euo pipefail
                aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}"
                kubectl apply -f "${K8S_PATH}/"
              '''
            }
          } else {
            withCredentials([file(credentialsId: 'kubeconfig-eks', variable: 'KUBECONFIG')]) {
              sh '''
                set -euo pipefail
                kubectl apply -f "${K8S_PATH}/"
              '''
            }
          }
        }
      }
    }
  }

  post { success { sh 'kubectl get deploy,svc -A | sed -n "1,20p"' } }
}

